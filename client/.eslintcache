[{"D:\\Pathik\\GO\\Telexs\\client\\src\\index.js":"1","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\App.js":"2","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\index.js":"3","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Landing.js":"4","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Devices.js":"5","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\authReducer.js":"6","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\devicesReducer.js":"7","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\statsReducer.js":"8","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\index.js":"9","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\modalForm.js":"10","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\types.js":"11","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\NavBar.js":"12","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Header.js":"13"},{"size":492,"mtime":1607361890241,"results":"14","hashOfConfig":"15"},{"size":1244,"mtime":1608055039506,"results":"16","hashOfConfig":"15"},{"size":371,"mtime":1606330715731,"results":"17","hashOfConfig":"15"},{"size":1574,"mtime":1609691380333,"results":"18","hashOfConfig":"15"},{"size":13208,"mtime":1609612664483,"results":"19","hashOfConfig":"15"},{"size":615,"mtime":1599406255993,"results":"20","hashOfConfig":"15"},{"size":3351,"mtime":1610623332225,"results":"21","hashOfConfig":"15"},{"size":439,"mtime":1608915811905,"results":"22","hashOfConfig":"15"},{"size":3416,"mtime":1608916313585,"results":"23","hashOfConfig":"15"},{"size":11543,"mtime":1610628313313,"results":"24","hashOfConfig":"15"},{"size":923,"mtime":1607967100237,"results":"25","hashOfConfig":"15"},{"size":5894,"mtime":1609003155474,"results":"26","hashOfConfig":"15"},{"size":1743,"mtime":1609345149425,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1bunqfi",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"D:\\Pathik\\GO\\Telexs\\client\\src\\index.js",[],["63","64"],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\App.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\index.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Landing.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Devices.js",["65","66"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Container, \r\n  Header, \r\n  Content, \r\n  Table, \r\n  Popover, \r\n  Whisper, \r\n  Checkbox, \r\n  Dropdown, \r\n  IconButton, \r\n  Icon, \r\n  Divider, \r\n  Progress, \r\n  Button,\r\n  InputGroup,\r\n  Input\r\n} from 'rsuite';\r\nimport { fetchDevices, deleteDevices } from \"../actions\";\r\nimport HeaderBar from \"./Header\";\r\nimport ModalForm from \"./modalForm\";\r\n\r\nconst { Line } = Progress;\r\nconst { Cell, Column, HeaderCell } = Table;\r\n\r\n\r\nconst NameCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n  <Popover title=\"Description\">\r\n    <p>\r\n      <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n    </p>\r\n    <p>\r\n      <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Type:</b> {rowData.type}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Vendor:</b> {rowData.vendor}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Model:</b> {rowData.model}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Version:</b> {rowData.version}{' '}\r\n    </p>\r\n  </Popover>\r\n);\r\n\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ?<Icon icon='circle' style={rowData[dataKey].split(\",\")[0] === 'true' ? {color: '#2b850d'} : {color: '#d62915'}} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst CpuCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n    <Popover title=\"Description\">\r\n      <p>\r\n        <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n      </p>\r\n      <p>\r\n        <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Type:</b> {rowData.type}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Vendor:</b> {rowData.vendor}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Model:</b> {rowData.model}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Version:</b> {rowData.version}{' '}\r\n      </p>\r\n    </Popover>\r\n  );\r\n  const cpu = rowData[dataKey] ? rowData[dataKey].split(\",\")[1] ? Number(rowData[dataKey].split(\",\")[1]) : 0 : 0\r\n  let strokeColor = '';\r\n  if (cpu >= 0 && cpu <= 40) {\r\n    strokeColor = '#2b850d'\r\n  } else if (cpu > 40 && cpu <= 80) {\r\n    strokeColor = '#eb9d17'\r\n  } else if(cpu > 80 ) {\r\n    strokeColor = '#d62915'\r\n  }\r\n\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ? <Line percent={Number(rowData[dataKey].split(\",\")[1])} strokeColor={strokeColor} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst MemCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n    <Popover title=\"Description\">\r\n      <p>\r\n        <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n      </p>\r\n      <p>\r\n        <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Type:</b> {rowData.type}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Vendor:</b> {rowData.vendor}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Model:</b> {rowData.model}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Version:</b> {rowData.version}{' '}\r\n      </p>\r\n    </Popover>\r\n  );\r\n  const memory = rowData[dataKey] ? Number(rowData[dataKey].split(\",\")[4])/Number(rowData[dataKey].split(\",\")[3]) ? Math.round((Number(rowData[dataKey].split(\",\")[4])/Number(rowData[dataKey].split(\",\")[3]))*100) : 0 : 0\r\n  let strokeColor = '';\r\n  if (memory >= 0 && memory <= 40) {\r\n    strokeColor = '#2b850d'\r\n  } else if (memory > 40 && memory <= 80) {\r\n    strokeColor = '#eb9d17'\r\n  } else if(memory > 80 ) {\r\n    strokeColor = '#d62915'\r\n  }\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ? <Line percent={memory} strokeColor={strokeColor} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst ImageCell = ({ rowData, dataKey, ...props }) => (\r\n  <Cell {...props} style={{ padding: 0 }}>\r\n    <div\r\n      style={{\r\n        width: 40,\r\n        height: 40,\r\n        background: '#f5f5f5',\r\n        borderRadius: 20,\r\n        marginTop: 2,\r\n        overflow: 'hidden',\r\n        display: 'inline-block'\r\n      }}\r\n    >\r\n      <img src={rowData[dataKey]} width=\"44\" />\r\n    </div>\r\n  </Cell>\r\n);\r\n\r\nconst CheckCell = ({ rowData, onChange, checkedKeys, dataKey, ...props }) => (\r\n  <Cell {...props} style={{ padding: 0 }}>\r\n    <div style={{ lineHeight: '46px' }}>\r\n      <Checkbox\r\n        style={{marginBottom: \"8px\"}}\r\n        value={rowData[dataKey]}\r\n        inline\r\n        onChange={onChange}\r\n        checked={checkedKeys.some(item => item === rowData[dataKey])}\r\n      />\r\n    </div>\r\n  </Cell>\r\n);\r\n\r\nconst Menu = ({ onSelect }) => (\r\n  <Dropdown.Menu onSelect={onSelect}>\r\n    <Dropdown.Item eventKey={3}>Download As...</Dropdown.Item>\r\n    <Dropdown.Item eventKey={4}>Export PDF</Dropdown.Item>\r\n    <Dropdown.Item eventKey={5}>Export HTML</Dropdown.Item>\r\n    <Dropdown.Item eventKey={6}>Settings</Dropdown.Item>\r\n    <Dropdown.Item eventKey={7}>About</Dropdown.Item>\r\n  </Dropdown.Menu>\r\n);\r\n\r\nconst MenuPopover = ({ onSelect, ...rest }) => (\r\n  <Popover {...rest} full>\r\n    <Menu onSelect={onSelect} />\r\n  </Popover>\r\n);\r\n\r\nlet tableBody;\r\n\r\nclass CustomWhisper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSelectMenu = this.handleSelectMenu.bind(this);\r\n  }\r\n  handleSelectMenu(eventKey, event) {\r\n    console.log(eventKey);\r\n    this.trigger.hide();\r\n  }\r\n  render() {\r\n    return (\r\n      <Whisper\r\n        placement=\"autoVerticalStart\"\r\n        trigger=\"click\"\r\n        triggerRef={ref => {\r\n          this.trigger = ref;\r\n        }}\r\n        container={() => {\r\n          return tableBody;\r\n        }}\r\n        speaker={<MenuPopover onSelect={this.handleSelectMenu} />}\r\n      >\r\n        {this.props.children}\r\n      </Whisper>\r\n    );\r\n  }\r\n}\r\n\r\nconst ActionCell = ({ rowData, dataKey, ...props }) => {\r\n  const handleAction = () => {\r\n    props.onEdit(rowData);\r\n  }\r\n  return (\r\n    <Cell {...props} className=\"link-group\">\r\n      <IconButton\r\n        appearance=\"subtle\"\r\n        onClick={handleAction}\r\n        icon={<Icon icon=\"edit2\" />}\r\n      />\r\n      <Divider vertical />\r\n      <CustomWhisper>\r\n        <IconButton appearance=\"subtle\" icon={<Icon icon=\"more\" />} />\r\n      </CustomWhisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nclass CustomColumnTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checkedKeys: []\r\n    };\r\n    this.handleCheckAll = this.handleCheckAll.bind(this);\r\n    this.handleCheck = this.handleCheck.bind(this);\r\n  }\r\n  handleCheckAll(value, checked) {\r\n    const checkedKeys = checked ? this.props.data.map(item => item.objectID) : [];\r\n    this.setState({\r\n      checkedKeys\r\n    });\r\n  }\r\n  handleCheck(value, checked) {\r\n    const { checkedKeys } = this.state;\r\n    const nextCheckedKeys = checked\r\n      ? [...checkedKeys, value]\r\n      : checkedKeys.filter(item => item !== value);\r\n\r\n    this.setState({\r\n      checkedKeys: nextCheckedKeys\r\n    });\r\n  }\r\n\r\n  getChecked = () => {\r\n    return this.state.checkedKeys;\r\n  }\r\n\r\n  removeChecked = () => {\r\n    this.setState({ checkedKeys: []});\r\n  }\r\n\r\n  render() {\r\n    const { checkedKeys } = this.state;\r\n    const { data } = this.props;\r\n\r\n    let checked = false;\r\n    let indeterminate = false;\r\n\r\n    if (checkedKeys.length === data.length) {\r\n      checked = true;\r\n    } else if (checkedKeys.length === 0) {\r\n      checked = false;\r\n    } else if (checkedKeys.length > 0 && checkedKeys.length < data.length) {\r\n      indeterminate = true;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Table  \r\n          height={window.innerHeight - 151}\r\n          style={{marginRight: '25px', marginBottom: '20px'}}\r\n          data={data}\r\n          id=\"table\"\r\n          bodyRef={ref => {\r\n            tableBody = ref;\r\n          }}\r\n          headerHeight={45}\r\n          shouldUpdateScroll={false}\r\n          translate3d={false}\r\n        >\r\n          <Column resizable={true} width={50} align=\"center\">\r\n            <HeaderCell style={{ padding: 0, fontSize: '17px' }}>\r\n              <div style={{ lineHeight: '40px' }}>\r\n                <Checkbox\r\n                  inline\r\n                  checked={checked}\r\n                  indeterminate={indeterminate}\r\n                  onChange={this.handleCheckAll}\r\n                />\r\n              </div>\r\n            </HeaderCell>\r\n            <CheckCell\r\n              dataKey=\"objectID\"\r\n              checkedKeys={checkedKeys}\r\n              onChange={this.handleCheck}\r\n            />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={100} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>Health</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={170} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>CPU</HeaderCell>\r\n            <CpuCell style={{paddingTop: \"3px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={170} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>Memory</HeaderCell>\r\n            <MemCell style={{paddingTop: \"3px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={180}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Hostname</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"hostName\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={130}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Type</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"type\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Vendor</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"vendor\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={130}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Model</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"model\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={130}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Version</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"version\" />\r\n          </Column>\r\n\r\n          <Column resizable={true} width={150}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Action</HeaderCell>\r\n            <ActionCell onEdit={(data) => this.props.setSelected(data)} style={{paddingTop: \"5px\"}} dataKey=\"objectID\" />\r\n          </Column>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Devices extends Component{\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ipf: \"\",\r\n      selected: null\r\n    }\r\n    this.child = React.createRef();\r\n  }\r\n  \r\n  componentDidMount() {\r\n      this.props.fetchDevices();\r\n  }\r\n\r\n  onDeleteClick = () => {\r\n    const checked = this.child.current.getChecked();\r\n    this.props.deleteDevices(checked);\r\n    this.child.current.removeChecked();\r\n  }\r\n\r\n  handleEdit = (data) => {\r\n    this.setState({selected: data});\r\n  }\r\n\r\n  render() {\r\n      const { data } = this.props.devices;\r\n      console.log(data)\r\n      return (\r\n          <Container>\r\n            <HeaderBar>Firewall</HeaderBar>\r\n            <Header style={{ marginLeft: '2em', marginTop: '1.5em', marginRight: '2em'}} className=\"flex-container\">\r\n                <div style={{display: \"flex\", justifyContent: \"flex-start\"}}>\r\n                  <div>\r\n                  <ModalForm selected={this.state.selected} resetSelected={() => this.setState({ selected: null})}>Add Device</ModalForm>\r\n                  </div>\r\n                  <div>\r\n                  <Button style={{ marginLeft: \"10px\"}} onClick={this.onDeleteClick}>Delete Selected</Button>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <InputGroup inside style={{width: 250}}>\r\n                    <Input placeholder=\"Search for IP...\" value={this.state.ipf} onChange={(val) => this.setState({ipf: val})}/>\r\n                    <InputGroup.Addon>\r\n                      <Icon icon=\"search\"/>\r\n                    </InputGroup.Addon>\r\n                  </InputGroup>\r\n                </div>\r\n            </Header>\r\n            <Content style={{ marginLeft: '2em', marginTop: '1em'}}>\r\n              {data ? <CustomColumnTable setSelected={(data) => this.handleEdit(data)} ref={this.child} data={this.state.ipf ? data.filter((device) => device.ipAddress.includes(this.state.ipf)): data}></CustomColumnTable> : ''}\r\n            </Content>\r\n          </Container>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ devices, status }, ) => {\r\n    const { data } = devices;\r\n    if(data && status.data) {\r\n      devices.data = data.map((device) => {\r\n        device.status = status.data[device.objectID];\r\n        return device;\r\n      });\r\n    }\r\n    return { devices, status };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchDevices, deleteDevices })(Devices);","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\authReducer.js",["67"],"import { FETCH_USER, FETCH_USER_SUCCESS, FETCH_USER_ERROR } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    data: null,\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_USER:\r\n            return { ...state, loading: true };\r\n        case FETCH_USER_SUCCESS:\r\n            return { ...state, loading: false, error: null, data: action.payload };\r\n        case FETCH_USER_ERROR:\r\n            return { ...state, loading: false, error: action.payload, data: null };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\devicesReducer.js",["68","69"],"import { \r\n    ADD_DEVICES,\r\n    ADD_DEVICES_ERROR, \r\n    ADD_DEVICES_SUCCESS, \r\n    CLEAR_ERROR,\r\n    MODIFY_DEVICE,\r\n    DELETE_DEVICES, \r\n    DELETE_DEVICES_SUCCESS, \r\n    FETCH_DEVICES, \r\n    FETCH_DEVICES_ERROR, \r\n    FETCH_DEVICES_SUCCESS, \r\n    MODIFY_DEVICE_SUCCESS\r\n} from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    adding: false,\r\n    modifying: false,\r\n    data: null,\r\n    error: null,\r\n    loading: false\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_DEVICES:\r\n            return { ...state, loading: true };\r\n        case FETCH_DEVICES_SUCCESS:\r\n            return { ...state, loading: false, adding: false, modifying: false, error: null, data: action.payload };\r\n        case FETCH_DEVICES_ERROR:\r\n            return { ...state, loading: false, adding: false, modifying: false, error: action.payload, data: null };\r\n        case ADD_DEVICES:\r\n            return { ...state, loading: false, adding: true, modifying: false, error: null };\r\n        case ADD_DEVICES_SUCCESS:\r\n            // if (state.data.some((dev) => dev.objectID === action.payload.objectID)) {\r\n            //     return state\r\n            // }\r\n            return { ...state, loading: false, adding: false, modifying: false, error: null, data: state.data.concat(action.payload)}\r\n        case ADD_DEVICES_ERROR:\r\n                // if (state.data.some((dev) => dev.objectID === action.payload.objectID)) {\r\n                //     return state\r\n                // }\r\n            console.log(action.payload.response.status)\r\n            if (action.payload.response.status === 409) {\r\n                if (state.data.some((dev) => dev.objectID === action.payload.response.data.objectID)) {\r\n                    return { ...state, loading: false, error: \"Device Already Exists in your list.\" }\r\n                }\r\n                return { ...state, loading: false, adding: false, modifying: false, error: \"Device Already Exists in database...Adding it to your list.\", data: state.data.concat(action.payload.response.data) }\r\n            } else if (action.payload.response.status === 401) {\r\n                return { ...state, loading: false, adding: false, modifying: false, error: \"You are not Authorized to Perform this operation.\" }\r\n            }\r\n            return { ...state, loading: false, adding: false, modifying: false, error: action.payload };\r\n\r\n        case MODIFY_DEVICE:\r\n            return {...state, loading: false, adding: false, modifying: true, error: null };\r\n        case MODIFY_DEVICE_SUCCESS:\r\n            const modifiedData = state.data.map((device) => {\r\n                if (device.objectID === action.payload.objectID) {\r\n                    return action.payload;\r\n                }\r\n                return device;\r\n            });\r\n            console.log(modifiedData);\r\n            return {...state, loading: false, adding: false, modifying: false, data: modifiedData, error: null };\r\n        case DELETE_DEVICES_SUCCESS:\r\n            return { ...state, loading: false, adding: false, modifying: false, error: null, data: state.data.filter((device) => !action.payload.includes(device.objectID))}\r\n        case CLEAR_ERROR:\r\n            return { ...state, loading: false, adding: false, modifying: false, error: null };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\statsReducer.js",["70"],"import { CHANGE_DEVICE_STATUS } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    loading: false,\r\n    data: null,\r\n    error: null\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_DEVICE_STATUS:\r\n            console.log(action.payload)\r\n            return { ...state, loading: false, error: false, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\index.js",["71"],"import axios from \"axios\";\r\nimport { \r\n    FETCH_USER_ERROR, \r\n    FETCH_USER_SUCCESS, \r\n    FETCH_USER, \r\n    FETCH_DEVICES, \r\n    FETCH_DEVICES_SUCCESS, \r\n    FETCH_DEVICES_ERROR, \r\n    CHANGE_DEVICE_STATUS,\r\n    ADD_DEVICES,\r\n    ADD_DEVICES_SUCCESS,\r\n    ADD_DEVICES_ERROR,\r\n    CLEAR_ERROR,\r\n    DELETE_DEVICES,\r\n    DELETE_DEVICES_SUCCESS,\r\n    DELETE_DEVICES_ERROR,\r\n    MODIFY_DEVICE,\r\n    MODIFY_DEVICE_SUCCESS,\r\n    MODIFY_DEVICE_ERROR\r\n} from \"./types\";\r\nlet count = 0;\r\nlet socketStore;\r\n\r\nexport const fetchUser = () => async dispatch => {\r\n    dispatch({ type: FETCH_USER });\r\n    try {\r\n        const response = await axios.get(\"/api/user\");\r\n        dispatch({ type: FETCH_USER_SUCCESS, payload: response.data});\r\n    } catch (e) {\r\n        return dispatch({ type: FETCH_USER_ERROR, payload: e });\r\n    }\r\n}\r\n\r\nexport const fetchDevices = () => async dispatch => {\r\n    dispatch({ type: FETCH_DEVICES });\r\n    try {\r\n        const response = await axios.get(\"/api/devices\");\r\n        return dispatch({ type: FETCH_DEVICES_SUCCESS, payload: response.data });\r\n    } catch(e) {\r\n        return dispatch({ type: FETCH_DEVICES_ERROR, payload: e });\r\n    }\r\n}\r\n\r\nexport const deleteDevices = (devices) => async dispatch => {\r\n    dispatch({ type: DELETE_DEVICES });\r\n    try {\r\n        const responses = devices.map((device) => {\r\n            const response = axios.delete(`/api/device/${device}`);\r\n            return response;\r\n        })\r\n        await Promise.all(responses)\r\n        return dispatch({ type: DELETE_DEVICES_SUCCESS, payload: devices })\r\n    } catch(e) {\r\n        return dispatch({ type: DELETE_DEVICES_ERROR, payload: e })\r\n    }\r\n}\r\n\r\nexport const clearError = () => async dispatch => {\r\n    return dispatch({ type: CLEAR_ERROR });\r\n}\r\n\r\nexport const addDevices = (data) => async dispatch => {\r\n    dispatch({ type: ADD_DEVICES });\r\n    try{\r\n        const response = await axios.post(\"/api/devices\", data);\r\n        // socketStore.send(JSON.stringify({ eventName: \"addDevice\" }))\r\n        return dispatch({ type: ADD_DEVICES_SUCCESS, payload: {...data, objectID: response.data.objectID } });\r\n    } catch(e) {\r\n        return dispatch({ type: ADD_DEVICES_ERROR, payload: e });\r\n    }\r\n}\r\n\r\nexport const modifyDevices = (data) => async dispatch => {\r\n    dispatch({ type: MODIFY_DEVICE });\r\n    try {\r\n        const response = await axios.put(`/api/device/${data.objectID}`, data);\r\n        return dispatch({ type: MODIFY_DEVICE_SUCCESS, payload: data});\r\n    } catch(e) {\r\n        return dispatch({ type: MODIFY_DEVICE_ERROR, payload: e});\r\n    }\r\n}\r\n\r\nexport const socketSub = (socket) => async dispatch => {\r\n    socketStore = socket;\r\n    socketStore.onopen = () => {\r\n        count = 0;\r\n        socketStore.send(JSON.stringify({ eventName: \"subscribe\" }));\r\n    }\r\n\r\n    socketStore.onmessage = (evt) => {\r\n        const event = JSON.parse(evt.data)\r\n        switch(event.eventName) {\r\n            case \"deviceStatus\":\r\n                dispatch({ type: CHANGE_DEVICE_STATUS, payload: event.payload });\r\n                break;\r\n            default:\r\n                console.log(event);\r\n        }\r\n    }\r\n\r\n    socketStore.onclose = () => {\r\n        if (count <= 4) {\r\n            console.log(\"Re-connecting Socket\");\r\n            const socket = new WebSocket(\"ws://localhost:5000/api/socket\");\r\n            socketSub(socket)(dispatch);\r\n            count++;\r\n        }\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\modalForm.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\types.js",[],["72","73"],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\NavBar.js",["74","75"],"import React, { Component } from \"react\";\r\nimport { Navbar, Nav, Dropdown, Icon, Loader, Sidebar, Sidenav } from 'rsuite';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst headerStyles = {\r\n  padding: 18,\r\n  fontSize: 16,\r\n  height: 56,\r\n  background: '#34c3ff',\r\n  color: ' #fff',\r\n  whiteSpace: 'nowrap',\r\n  overflow: 'hidden'\r\n};\r\n\r\nconst iconStyles = {\r\n  width: 56,\r\n  height: 56,\r\n  lineHeight: '56px',\r\n  textAlign: 'center'\r\n};\r\n\r\nconst NavToggle = ({ expand, onChange, auth }) => {\r\n  return (\r\n    <Navbar appearance=\"default\" className=\"nav-toggle\">\r\n      <Navbar.Body>\r\n        {/* <Nav>\r\n          {auth.data ? \r\n            <Dropdown\r\n            placement=\"topStart\"\r\n            trigger=\"click\"\r\n            renderTitle={children => {\r\n              return <Icon style={iconStyles} icon=\"cog\" />;\r\n            }}\r\n          >\r\n            <Dropdown.Item>Help</Dropdown.Item>\r\n            <Dropdown.Item>Settings</Dropdown.Item>\r\n            <Dropdown.Item><a href='/api/logout'>Sign Out</a></Dropdown.Item>\r\n          </Dropdown>\r\n          : auth.loading ? <Loader /> : \r\n          expand ? <Nav.Item>\r\n            <a href=\"/auth/google\">Sign In with Google</a>\r\n          </Nav.Item> : <a href='/auth/google'><Icon style={iconStyles} icon=\"google\" /></a>\r\n          }\r\n          \r\n          \r\n        </Nav> */}\r\n        <Nav pullRight>\r\n          <Nav.Item onClick={onChange} style={{ width: 56, textAlign: 'center' }}>\r\n            <Icon icon={expand ? 'angle-left' : 'angle-right'} />\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Body>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nclass Head extends Component {\r\n  state = {\r\n      expand: false,\r\n      active: 1\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {pathname} = this.props.location;\r\n    switch(pathname) {\r\n      case \"/devices\" || \"/Devices\":\r\n        this.setState({active: 2});\r\n        break;\r\n      default:\r\n        this.setState({active: 1})\r\n    }\r\n  }\r\n\r\n  handleToggle = () => {\r\n    this.setState({\r\n      expand: !this.state.expand\r\n    });\r\n  }\r\n\r\n  handleSelect = (active) => {\r\n    this.setState({\r\n      active\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    const { expand, active } = this.state;\r\n    console.log(this.props.auth)\r\n    return (\r\n      <React.Fragment>\r\n          <Sidebar\r\n            style={{ display: 'flex', flexDirection: 'column', height: '100vh'}}\r\n            width={expand ? 260 : 56}\r\n            collapsible\r\n          >\r\n            <Sidenav.Header>\r\n              <div style={headerStyles}>\r\n                <Icon icon=\"logo-analytics\" size=\"lg\" style={{ verticalAlign: 0, marginRight:\"5px\" }} />\r\n                <span>TELEXS</span>\r\n              </div>\r\n            </Sidenav.Header>\r\n            <Sidenav\r\n              expanded={expand}\r\n              defaultOpenKeys={['3']}\r\n              appearance=\"default\"\r\n              style={{flexGrow: '8'}}\r\n            >\r\n              <Sidenav.Body>\r\n                <Nav>\r\n                  <Nav.Item onClick={() => {this.props.history.push(\"/\"); return this.handleSelect(1)}} eventKey=\"1\" active={active === 1 ? true : false} icon={<Icon icon=\"dashboard\" />}>\r\n                    Dashboard\r\n                  </Nav.Item>\r\n                  <Nav.Item onClick={() => {this.props.history.push(\"/devices\"); return this.handleSelect(2)}} eventKey=\"2\" active={active === 2 ? true : false} icon={<Icon icon=\"group\" />}>\r\n                    Devices\r\n                  </Nav.Item>\r\n                  <Dropdown\r\n                    eventKey=\"3\"\r\n                    trigger=\"hover\"\r\n                    title=\"Advanced\"\r\n                    icon={<Icon icon=\"magic\" />}\r\n                    placement=\"rightStart\"\r\n                    \r\n                  >\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(31)} active={active === 31 ? true : false} eventKey=\"3-1\">Geo</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(32)} active={active === 32 ? true : false} eventKey=\"3-2\">Devices</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(33)} active={active === 33 ? true : false} eventKey=\"3-3\">Brand</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(34)} active={active === 34 ? true : false} eventKey=\"3-4\">Loyalty</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(35)} active={active === 35 ? true : false} eventKey=\"3-5\">Visit Depth</Dropdown.Item>\r\n                  </Dropdown>\r\n                  <Dropdown\r\n                    eventKey=\"4\"\r\n                    trigger=\"hover\"\r\n                    title=\"Settings\"\r\n                    icon={<Icon icon=\"gear-circle\" />}\r\n                    placement=\"rightStart\"\r\n                    active={active === 4 ? true : false}\r\n                  >\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(41)} active={active === 41 ? true : false} eventKey=\"4-1\">Applications</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(42)} active={active === 42 ? true : false} eventKey=\"4-2\">Websites</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(43)} active={active === 43 ? true : false} eventKey=\"4-3\">Channels</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(44)} active={active === 44 ? true : false} eventKey=\"4-4\">Tags</Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => this.handleSelect(45)} active={active === 45 ? true : false} eventKey=\"4-5\">Versions</Dropdown.Item>\r\n                  </Dropdown>\r\n                </Nav>\r\n              </Sidenav.Body>\r\n            </Sidenav>\r\n            <NavToggle expand={expand} onChange={this.handleToggle} auth={this.props.auth} />\r\n          </Sidebar>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Head);","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Header.js",["76","77"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Nav, Navbar, Dropdown, Loader} from \"rsuite\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const { auth } = props;\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Navbar appearance=\"inverse\">\r\n            <Navbar.Header>\r\n            <a href=\"#\" className=\"navbar-brand logo\">{props.children}</a>\r\n            </Navbar.Header>\r\n            <Navbar.Body>\r\n            <Nav>\r\n                {/* <Nav.Item icon={<Icon icon=\"home\" />} >Home</Nav.Item> */}\r\n                {/* <Nav.Item>Add</Nav.Item>\r\n                <Nav.Item>Delete</Nav.Item> */}\r\n                {/* <Dropdown title=\"About\">\r\n                <Dropdown.Item>Company</Dropdown.Item>\r\n                <Dropdown.Item>Team</Dropdown.Item>\r\n                <Dropdown.Item>Contact</Dropdown.Item>\r\n                </Dropdown> */}\r\n            </Nav>\r\n            <Nav pullRight>\r\n\r\n\r\n                {auth.data ? \r\n                    <Dropdown title={auth.data.name}>\r\n                        <Dropdown.Item>Help</Dropdown.Item>\r\n                        <Dropdown.Item>Settings</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => window.location = '/api/logout'}>Sign Out</Dropdown.Item>\r\n                    </Dropdown>\r\n                : auth.loading ? <Nav.Item><Loader /></Nav.Item> : <Nav.Item onClick={() => window.location = '/auth/google'}>\r\n                    Login with Google\r\n                </Nav.Item>\r\n                }\r\n            </Nav>\r\n            </Navbar.Body>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ auth }) => {\r\n    return { auth };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":149,"column":7,"nodeType":"84","messageId":"85","endLine":149,"endColumn":16},{"ruleId":"86","severity":1,"message":"87","line":162,"column":7,"nodeType":"88","endLine":162,"endColumn":48},{"ruleId":"89","severity":1,"message":"90","line":9,"column":1,"nodeType":"91","endLine":20,"endColumn":2},{"ruleId":"82","severity":1,"message":"92","line":7,"column":5,"nodeType":"84","messageId":"85","endLine":7,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":23,"column":1,"nodeType":"91","endLine":71,"endColumn":2},{"ruleId":"89","severity":1,"message":"90","line":9,"column":1,"nodeType":"91","endLine":17,"endColumn":2},{"ruleId":"82","severity":1,"message":"93","line":76,"column":15,"nodeType":"84","messageId":"85","endLine":76,"endColumn":23},{"ruleId":"78","replacedBy":"94"},{"ruleId":"80","replacedBy":"95"},{"ruleId":"82","severity":1,"message":"96","line":2,"column":39,"nodeType":"84","messageId":"85","endLine":2,"endColumn":45},{"ruleId":"82","severity":1,"message":"97","line":15,"column":7,"nodeType":"84","messageId":"85","endLine":15,"endColumn":17},{"ruleId":"82","severity":1,"message":"98","line":8,"column":11,"nodeType":"84","messageId":"85","endLine":8,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":13,"column":13,"nodeType":"88","endLine":13,"endColumn":55},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'ImageCell' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'DELETE_DEVICES' is defined but never used.","'response' is assigned a value but never used.",["101"],["102"],"'Loader' is defined but never used.","'iconStyles' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]