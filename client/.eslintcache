[{"D:\\Pathik\\GO\\Telexs\\client\\src\\index.js":"1","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\App.js":"2","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\index.js":"3","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Landing.js":"4","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Header.js":"5","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Devices.js":"6","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\authReducer.js":"7","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\devicesReducer.js":"8","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\statsReducer.js":"9","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\index.js":"10","D:\\Pathik\\GO\\Telexs\\client\\src\\components\\modalForm.js":"11","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\types.js":"12"},{"size":492,"mtime":1607361890241,"results":"13","hashOfConfig":"14"},{"size":1244,"mtime":1602866128430,"results":"15","hashOfConfig":"14"},{"size":371,"mtime":1606330715731,"results":"16","hashOfConfig":"14"},{"size":397,"mtime":1603012294090,"results":"17","hashOfConfig":"14"},{"size":5895,"mtime":1607248937321,"results":"18","hashOfConfig":"14"},{"size":13531,"mtime":1607533887961,"results":"19","hashOfConfig":"14"},{"size":615,"mtime":1599406255993,"results":"20","hashOfConfig":"14"},{"size":2068,"mtime":1606676071638,"results":"21","hashOfConfig":"14"},{"size":398,"mtime":1602869923193,"results":"22","hashOfConfig":"14"},{"size":2948,"mtime":1607236425902,"results":"23","hashOfConfig":"14"},{"size":8622,"mtime":1606676339519,"results":"24","hashOfConfig":"14"},{"size":754,"mtime":1606666772788,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1bunqfi",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"D:\\Pathik\\GO\\Telexs\\client\\src\\index.js",[],["56","57"],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\App.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\index.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Landing.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Header.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\Devices.js",["58","59","60"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Container, \r\n  Header, \r\n  Content, \r\n  Table, \r\n  Popover, \r\n  Whisper, \r\n  Checkbox, \r\n  Dropdown, \r\n  IconButton, \r\n  Icon, \r\n  Divider, \r\n  Progress, \r\n  Button,\r\n  InputGroup,\r\n  Input,\r\n  Navbar,\r\n  Nav\r\n} from 'rsuite';\r\nimport { fetchDevices, deleteDevices } from \"../actions\";\r\nimport ModalForm from \"./modalForm\";\r\nconst { Line } = Progress;\r\nconst { Cell, Column, HeaderCell } = Table;\r\n\r\nconst NameCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n  <Popover title=\"Description\">\r\n    <p>\r\n      <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n    </p>\r\n    <p>\r\n      <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Type:</b> {rowData.type}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Vendor:</b> {rowData.vendor}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Model:</b> {rowData.model}{' '}\r\n    </p>\r\n    <p>\r\n      <b>Version:</b> {rowData.version}{' '}\r\n    </p>\r\n  </Popover>\r\n);\r\n\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ?<Icon icon='circle' style={rowData[dataKey].split(\",\")[0] === 'true' ? {color: '#2b850d'} : {color: '#d62915'}} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst CpuCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n    <Popover title=\"Description\">\r\n      <p>\r\n        <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n      </p>\r\n      <p>\r\n        <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Type:</b> {rowData.type}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Vendor:</b> {rowData.vendor}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Model:</b> {rowData.model}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Version:</b> {rowData.version}{' '}\r\n      </p>\r\n    </Popover>\r\n  );\r\n  const cpu = rowData[dataKey] ? rowData[dataKey].split(\",\")[1] ? Number(rowData[dataKey].split(\",\")[1]) : 0 : 0\r\n  let strokeColor = '';\r\n  if (cpu >= 0 && cpu <= 40) {\r\n    strokeColor = '#2b850d'\r\n  } else if (cpu > 40 && cpu <= 80) {\r\n    strokeColor = '#eb9d17'\r\n  } else if(cpu > 80 ) {\r\n    strokeColor = '#d62915'\r\n  }\r\n\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ? <Line percent={Number(rowData[dataKey].split(\",\")[1])} strokeColor={strokeColor} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst MemCell = ({ rowData, dataKey, ...props }) => {\r\n  const speaker = (\r\n    <Popover title=\"Description\">\r\n      <p>\r\n        <b>Hostname:</b> {`${rowData.hostName}`}{' '}\r\n      </p>\r\n      <p>\r\n        <b>IPAddress:</b> {rowData.ipAddress}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Type:</b> {rowData.type}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Vendor:</b> {rowData.vendor}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Model:</b> {rowData.model}{' '}\r\n      </p>\r\n      <p>\r\n        <b>Version:</b> {rowData.version}{' '}\r\n      </p>\r\n    </Popover>\r\n  );\r\n  const memory = rowData[dataKey] ? Number(rowData[dataKey].split(\",\")[4])/Number(rowData[dataKey].split(\",\")[3]) ? Math.round((Number(rowData[dataKey].split(\",\")[4])/Number(rowData[dataKey].split(\",\")[3]))*100) : 0 : 0\r\n  let strokeColor = '';\r\n  if (memory >= 0 && memory <= 40) {\r\n    strokeColor = '#2b850d'\r\n  } else if (memory > 40 && memory <= 80) {\r\n    strokeColor = '#eb9d17'\r\n  } else if(memory > 80 ) {\r\n    strokeColor = '#d62915'\r\n  }\r\n  return (\r\n    <Cell {...props}>\r\n      <Whisper placement=\"right\" speaker={speaker}>\r\n        {dataKey === 'status' ? <div>{rowData[dataKey] != null ? <Line percent={memory} strokeColor={strokeColor} /> : ''}</div>:\r\n          <div>{rowData[dataKey]}</div>\r\n        }\r\n      </Whisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nconst ImageCell = ({ rowData, dataKey, ...props }) => (\r\n  <Cell {...props} style={{ padding: 0 }}>\r\n    <div\r\n      style={{\r\n        width: 40,\r\n        height: 40,\r\n        background: '#f5f5f5',\r\n        borderRadius: 20,\r\n        marginTop: 2,\r\n        overflow: 'hidden',\r\n        display: 'inline-block'\r\n      }}\r\n    >\r\n      <img src={rowData[dataKey]} width=\"44\" />\r\n    </div>\r\n  </Cell>\r\n);\r\n\r\nconst CheckCell = ({ rowData, onChange, checkedKeys, dataKey, ...props }) => (\r\n  <Cell {...props} style={{ padding: 0 }}>\r\n    <div style={{ lineHeight: '46px' }}>\r\n      <Checkbox\r\n        style={{marginBottom: \"8px\"}}\r\n        value={rowData[dataKey]}\r\n        inline\r\n        onChange={onChange}\r\n        checked={checkedKeys.some(item => item === rowData[dataKey])}\r\n      />\r\n    </div>\r\n  </Cell>\r\n);\r\n\r\nconst Menu = ({ onSelect }) => (\r\n  <Dropdown.Menu onSelect={onSelect}>\r\n    <Dropdown.Item eventKey={3}>Download As...</Dropdown.Item>\r\n    <Dropdown.Item eventKey={4}>Export PDF</Dropdown.Item>\r\n    <Dropdown.Item eventKey={5}>Export HTML</Dropdown.Item>\r\n    <Dropdown.Item eventKey={6}>Settings</Dropdown.Item>\r\n    <Dropdown.Item eventKey={7}>About</Dropdown.Item>\r\n  </Dropdown.Menu>\r\n);\r\n\r\nconst MenuPopover = ({ onSelect, ...rest }) => (\r\n  <Popover {...rest} full>\r\n    <Menu onSelect={onSelect} />\r\n  </Popover>\r\n);\r\n\r\nlet tableBody;\r\n\r\nclass CustomWhisper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSelectMenu = this.handleSelectMenu.bind(this);\r\n  }\r\n  handleSelectMenu(eventKey, event) {\r\n    console.log(eventKey);\r\n    this.trigger.hide();\r\n  }\r\n  render() {\r\n    return (\r\n      <Whisper\r\n        placement=\"autoVerticalStart\"\r\n        trigger=\"click\"\r\n        triggerRef={ref => {\r\n          this.trigger = ref;\r\n        }}\r\n        container={() => {\r\n          return tableBody;\r\n        }}\r\n        speaker={<MenuPopover onSelect={this.handleSelectMenu} />}\r\n      >\r\n        {this.props.children}\r\n      </Whisper>\r\n    );\r\n  }\r\n}\r\n\r\nconst ActionCell = ({ rowData, dataKey, ...props }) => {\r\n  function handleAction() {\r\n    alert(`id:${rowData[dataKey]}`);\r\n  }\r\n  return (\r\n    <Cell {...props} className=\"link-group\">\r\n      <IconButton\r\n        appearance=\"subtle\"\r\n        onClick={handleAction}\r\n        icon={<Icon icon=\"edit2\" />}\r\n      />\r\n      <Divider vertical />\r\n      <CustomWhisper>\r\n        <IconButton appearance=\"subtle\" icon={<Icon icon=\"more\" />} />\r\n      </CustomWhisper>\r\n    </Cell>\r\n  );\r\n};\r\n\r\nclass CustomColumnTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checkedKeys: []\r\n    };\r\n    this.handleCheckAll = this.handleCheckAll.bind(this);\r\n    this.handleCheck = this.handleCheck.bind(this);\r\n  }\r\n  handleCheckAll(value, checked) {\r\n    const checkedKeys = checked ? this.props.data.map(item => item.objectID) : [];\r\n    this.setState({\r\n      checkedKeys\r\n    });\r\n  }\r\n  handleCheck(value, checked) {\r\n    const { checkedKeys } = this.state;\r\n    const nextCheckedKeys = checked\r\n      ? [...checkedKeys, value]\r\n      : checkedKeys.filter(item => item !== value);\r\n\r\n    this.setState({\r\n      checkedKeys: nextCheckedKeys\r\n    });\r\n  }\r\n\r\n  getChecked = () => {\r\n    return this.state.checkedKeys;\r\n  }\r\n\r\n  removeChecked = () => {\r\n    this.setState({ checkedKeys: []});\r\n  }\r\n\r\n  render() {\r\n    const { checkedKeys } = this.state;\r\n    const { data } = this.props;\r\n\r\n    let checked = false;\r\n    let indeterminate = false;\r\n\r\n    if (checkedKeys.length === data.length) {\r\n      checked = true;\r\n    } else if (checkedKeys.length === 0) {\r\n      checked = false;\r\n    } else if (checkedKeys.length > 0 && checkedKeys.length < data.length) {\r\n      indeterminate = true;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Table  \r\n          height={window.innerHeight - 153}\r\n          style={{marginRight: '25px', marginBottom: '20px'}}\r\n          data={data}\r\n          id=\"table\"\r\n          bodyRef={ref => {\r\n            tableBody = ref;\r\n          }}\r\n          headerHeight={45}\r\n          shouldUpdateScroll={false}\r\n        >\r\n          <Column width={50} align=\"center\">\r\n            <HeaderCell style={{ padding: 0, fontSize: '17px' }}>\r\n              <div style={{ lineHeight: '40px' }}>\r\n                <Checkbox\r\n                  inline\r\n                  checked={checked}\r\n                  indeterminate={indeterminate}\r\n                  onChange={this.handleCheckAll}\r\n                />\r\n              </div>\r\n            </HeaderCell>\r\n            <CheckCell\r\n              dataKey=\"objectID\"\r\n              checkedKeys={checkedKeys}\r\n              onChange={this.handleCheck}\r\n            />\r\n          </Column>\r\n\r\n          <Column width={160} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>Health</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column width={160} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>CPU</HeaderCell>\r\n            <CpuCell style={{paddingTop: \"3px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column width={160} align=\"center\">\r\n            <HeaderCell style={{ fontSize: '15px'}}>Memory</HeaderCell>\r\n            <MemCell style={{paddingTop: \"3px\"}} dataKey=\"status\" />\r\n          </Column>\r\n\r\n          <Column width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Hostname</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"hostName\" />\r\n          </Column>\r\n\r\n          <Column width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Type</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"type\" />\r\n          </Column>\r\n\r\n          <Column width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Vendor</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"vendor\" />\r\n          </Column>\r\n\r\n          <Column width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Model</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"model\" />\r\n          </Column>\r\n\r\n          <Column width={160}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Version</HeaderCell>\r\n            <NameCell style={{paddingTop: \"10px\"}} dataKey=\"version\" />\r\n          </Column>\r\n\r\n          <Column width={200}>\r\n            <HeaderCell style={{ fontSize: '15px'}}>Action</HeaderCell>\r\n            <ActionCell style={{paddingTop: \"5px\"}} dataKey=\"objectID\" />\r\n          </Column>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Devices extends Component{\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ipf: \"\"\r\n    }\r\n    this.child = React.createRef();\r\n  }\r\n  \r\n  componentDidMount() {\r\n      this.props.fetchDevices();\r\n  }\r\n\r\n  onDeleteClick = () => {\r\n    const checked = this.child.current.getChecked();\r\n    this.props.deleteDevices(checked);\r\n    this.child.current.removeChecked();\r\n  }\r\n\r\n  render() {\r\n      const { data } = this.props.devices;\r\n      return (\r\n          <Container>\r\n            <Navbar appearance=\"inverse\">\r\n              <Navbar.Header>\r\n                <a href=\"#\" className=\"navbar-brand logo\">Firewalls</a>\r\n              </Navbar.Header>\r\n              <Navbar.Body>\r\n                <Nav>\r\n                  {/* <Nav.Item icon={<Icon icon=\"home\" />} >Home</Nav.Item> */}\r\n                  {/* <Nav.Item>Add</Nav.Item>\r\n                  <Nav.Item>Delete</Nav.Item> */}\r\n                  {/* <Dropdown title=\"About\">\r\n                    <Dropdown.Item>Company</Dropdown.Item>\r\n                    <Dropdown.Item>Team</Dropdown.Item>\r\n                    <Dropdown.Item>Contact</Dropdown.Item>\r\n                  </Dropdown> */}\r\n                </Nav>\r\n                <Nav pullRight>\r\n                  <Nav.Item icon={<Icon icon=\"cog\" />} >Settings</Nav.Item>\r\n                </Nav>\r\n              </Navbar.Body>\r\n            </Navbar>\r\n            <Header style={{ marginLeft: '2em', marginTop: '1.5em', marginRight: '2em'}} className=\"flex-container\">\r\n                <div style={{display: \"flex\", justifyContent: \"flex-start\"}}>\r\n                  <div>\r\n                  <ModalForm>Add Device</ModalForm>\r\n                  </div>\r\n                  <div>\r\n                  <Button style={{ marginLeft: \"10px\"}} onClick={this.onDeleteClick}>Delete Selected</Button>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <InputGroup inside style={{width: 250}}>\r\n                    <Input placeholder=\"Search for IP...\" value={this.state.ipf} onChange={(val) => this.setState({ipf: val})}/>\r\n                    <InputGroup.Addon>\r\n                      <Icon icon=\"search\"/>\r\n                    </InputGroup.Addon>\r\n                  </InputGroup>\r\n                </div>\r\n            </Header>\r\n            <Content style={{ marginLeft: '2em', marginTop: '1em'}}>\r\n              {data ? <CustomColumnTable ref={this.child} data={this.state.ipf ? data.filter((device) => device.ipAddress.includes(this.state.ipf)): data}></CustomColumnTable> : ''}\r\n            </Content>\r\n          </Container>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ devices, status }, ) => {\r\n    const { data } = devices;\r\n    if(data && status.data) {\r\n      devices.data = data.map((device) => {\r\n        device.status = status.data[device.objectID];\r\n        return device;\r\n      });\r\n    }\r\n    return { devices, status };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchDevices, deleteDevices })(Devices);","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\authReducer.js",["61"],"import { FETCH_USER, FETCH_USER_SUCCESS, FETCH_USER_ERROR } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    data: null,\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_USER:\r\n            return { ...state, loading: true };\r\n        case FETCH_USER_SUCCESS:\r\n            return { ...state, loading: false, error: null, data: action.payload };\r\n        case FETCH_USER_ERROR:\r\n            return { ...state, loading: false, error: action.payload, data: null };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\devicesReducer.js",["62","63"],"import { ADD_DEVICES_ERROR, ADD_DEVICES_SUCCESS, CLEAR_ERROR, DELETE_DEVICES, DELETE_DEVICES_SUCCESS, FETCH_DEVICES, FETCH_DEVICES_ERROR, FETCH_DEVICES_SUCCESS } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    data: null,\r\n    error: null,\r\n    loading: false\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_DEVICES:\r\n            return { ...state, loading: true };\r\n        case FETCH_DEVICES_SUCCESS:\r\n            return { ...state, loading: false, error: null, data: action.payload };\r\n        case FETCH_DEVICES_ERROR:\r\n            return { ...state, loading: false, error: action.payload, data: null };\r\n        case ADD_DEVICES_SUCCESS:\r\n            // if (state.data.some((dev) => dev.objectID === action.payload.objectID)) {\r\n            //     return state\r\n            // }\r\n            return { ...state, loading: false, error: null, data: state.data.concat(action.payload)}\r\n        case ADD_DEVICES_ERROR:\r\n                // if (state.data.some((dev) => dev.objectID === action.payload.objectID)) {\r\n                //     return state\r\n                // }\r\n            console.log(action.payload.response.status)\r\n            if (action.payload.response.status === 409) {\r\n                if (state.data.some((dev) => dev.objectID === action.payload.response.data.objectID)) {\r\n                    return { ...state, loading: false, error: \"Device Already Exists in your list.\" }\r\n                }\r\n                return { ...state, loading: false, error: \"Device Already Exists in database...Adding it to your list.\", data: state.data.concat(action.payload.response.data) }\r\n            }\r\n            return { ...state, loading: false, error: action.payload };\r\n        case DELETE_DEVICES_SUCCESS:\r\n            return { ...state, loading: false, error: null, data: state.data.filter((device) => !action.payload.includes(device.objectID))}\r\n        case CLEAR_ERROR:\r\n            return { ...state, loading: false, error: null };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\reducers\\statsReducer.js",["64"],"import { CHANGE_DEVICE_STATUS } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    loading: false,\r\n    data: null,\r\n    error: null\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_DEVICE_STATUS:\r\n            return { ...state, loading: false, error: false, data: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\index.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\components\\modalForm.js",[],"D:\\Pathik\\GO\\Telexs\\client\\src\\actions\\types.js",[],["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":148,"column":7,"nodeType":"73","messageId":"74","endLine":148,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":161,"column":7,"nodeType":"77","endLine":161,"endColumn":48},{"ruleId":"78","severity":1,"message":"79","line":401,"column":17,"nodeType":"77","endLine":401,"endColumn":59},{"ruleId":"80","severity":1,"message":"81","line":9,"column":1,"nodeType":"82","endLine":20,"endColumn":2},{"ruleId":"71","severity":1,"message":"83","line":1,"column":63,"nodeType":"73","messageId":"74","endLine":1,"endColumn":77},{"ruleId":"80","severity":1,"message":"81","line":9,"column":1,"nodeType":"82","endLine":41,"endColumn":2},{"ruleId":"80","severity":1,"message":"81","line":9,"column":1,"nodeType":"82","endLine":16,"endColumn":2},{"ruleId":"67","replacedBy":"84"},{"ruleId":"69","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'ImageCell' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'DELETE_DEVICES' is defined but never used.",["86"],["87"],"no-global-assign","no-unsafe-negation"]